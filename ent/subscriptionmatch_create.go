// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Bpazy/behappy/ent/subscriptionmatch"
)

// SubscriptionMatchCreate is the builder for creating a SubscriptionMatch entity.
type SubscriptionMatchCreate struct {
	config
	mutation *SubscriptionMatchMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (smc *SubscriptionMatchCreate) SetCreateTime(t time.Time) *SubscriptionMatchCreate {
	smc.mutation.SetCreateTime(t)
	return smc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (smc *SubscriptionMatchCreate) SetNillableCreateTime(t *time.Time) *SubscriptionMatchCreate {
	if t != nil {
		smc.SetCreateTime(*t)
	}
	return smc
}

// SetUpdateTime sets the "update_time" field.
func (smc *SubscriptionMatchCreate) SetUpdateTime(t time.Time) *SubscriptionMatchCreate {
	smc.mutation.SetUpdateTime(t)
	return smc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (smc *SubscriptionMatchCreate) SetNillableUpdateTime(t *time.Time) *SubscriptionMatchCreate {
	if t != nil {
		smc.SetUpdateTime(*t)
	}
	return smc
}

// SetMatchID sets the "match_id" field.
func (smc *SubscriptionMatchCreate) SetMatchID(i int64) *SubscriptionMatchCreate {
	smc.mutation.SetMatchID(i)
	return smc
}

// SetPlayerID sets the "player_id" field.
func (smc *SubscriptionMatchCreate) SetPlayerID(s string) *SubscriptionMatchCreate {
	smc.mutation.SetPlayerID(s)
	return smc
}

// SetPlayerSlot sets the "player_slot" field.
func (smc *SubscriptionMatchCreate) SetPlayerSlot(i int) *SubscriptionMatchCreate {
	smc.mutation.SetPlayerSlot(i)
	return smc
}

// SetRadiantWin sets the "radiant_win" field.
func (smc *SubscriptionMatchCreate) SetRadiantWin(b bool) *SubscriptionMatchCreate {
	smc.mutation.SetRadiantWin(b)
	return smc
}

// SetDuration sets the "duration" field.
func (smc *SubscriptionMatchCreate) SetDuration(i int) *SubscriptionMatchCreate {
	smc.mutation.SetDuration(i)
	return smc
}

// SetGameMode sets the "game_mode" field.
func (smc *SubscriptionMatchCreate) SetGameMode(i int) *SubscriptionMatchCreate {
	smc.mutation.SetGameMode(i)
	return smc
}

// SetLobbyType sets the "lobby_type" field.
func (smc *SubscriptionMatchCreate) SetLobbyType(i int) *SubscriptionMatchCreate {
	smc.mutation.SetLobbyType(i)
	return smc
}

// SetHeroID sets the "hero_id" field.
func (smc *SubscriptionMatchCreate) SetHeroID(i int) *SubscriptionMatchCreate {
	smc.mutation.SetHeroID(i)
	return smc
}

// SetStartTime sets the "start_time" field.
func (smc *SubscriptionMatchCreate) SetStartTime(i int) *SubscriptionMatchCreate {
	smc.mutation.SetStartTime(i)
	return smc
}

// SetVersion sets the "version" field.
func (smc *SubscriptionMatchCreate) SetVersion(i int) *SubscriptionMatchCreate {
	smc.mutation.SetVersion(i)
	return smc
}

// SetKills sets the "kills" field.
func (smc *SubscriptionMatchCreate) SetKills(i int) *SubscriptionMatchCreate {
	smc.mutation.SetKills(i)
	return smc
}

// SetDeaths sets the "deaths" field.
func (smc *SubscriptionMatchCreate) SetDeaths(i int) *SubscriptionMatchCreate {
	smc.mutation.SetDeaths(i)
	return smc
}

// SetAssists sets the "assists" field.
func (smc *SubscriptionMatchCreate) SetAssists(i int) *SubscriptionMatchCreate {
	smc.mutation.SetAssists(i)
	return smc
}

// SetSkill sets the "skill" field.
func (smc *SubscriptionMatchCreate) SetSkill(i int) *SubscriptionMatchCreate {
	smc.mutation.SetSkill(i)
	return smc
}

// SetNillableSkill sets the "skill" field if the given value is not nil.
func (smc *SubscriptionMatchCreate) SetNillableSkill(i *int) *SubscriptionMatchCreate {
	if i != nil {
		smc.SetSkill(*i)
	}
	return smc
}

// SetLeaverStatus sets the "leaver_status" field.
func (smc *SubscriptionMatchCreate) SetLeaverStatus(i int) *SubscriptionMatchCreate {
	smc.mutation.SetLeaverStatus(i)
	return smc
}

// SetPartySize sets the "party_size" field.
func (smc *SubscriptionMatchCreate) SetPartySize(i int) *SubscriptionMatchCreate {
	smc.mutation.SetPartySize(i)
	return smc
}

// Mutation returns the SubscriptionMatchMutation object of the builder.
func (smc *SubscriptionMatchCreate) Mutation() *SubscriptionMatchMutation {
	return smc.mutation
}

// Save creates the SubscriptionMatch in the database.
func (smc *SubscriptionMatchCreate) Save(ctx context.Context) (*SubscriptionMatch, error) {
	var (
		err  error
		node *SubscriptionMatch
	)
	smc.defaults()
	if len(smc.hooks) == 0 {
		if err = smc.check(); err != nil {
			return nil, err
		}
		node, err = smc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubscriptionMatchMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smc.check(); err != nil {
				return nil, err
			}
			smc.mutation = mutation
			if node, err = smc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(smc.hooks) - 1; i >= 0; i-- {
			if smc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, smc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SubscriptionMatch)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SubscriptionMatchMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (smc *SubscriptionMatchCreate) SaveX(ctx context.Context) *SubscriptionMatch {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smc *SubscriptionMatchCreate) Exec(ctx context.Context) error {
	_, err := smc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smc *SubscriptionMatchCreate) ExecX(ctx context.Context) {
	if err := smc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smc *SubscriptionMatchCreate) defaults() {
	if _, ok := smc.mutation.CreateTime(); !ok {
		v := subscriptionmatch.DefaultCreateTime()
		smc.mutation.SetCreateTime(v)
	}
	if _, ok := smc.mutation.UpdateTime(); !ok {
		v := subscriptionmatch.DefaultUpdateTime()
		smc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smc *SubscriptionMatchCreate) check() error {
	if _, ok := smc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SubscriptionMatch.create_time"`)}
	}
	if _, ok := smc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SubscriptionMatch.update_time"`)}
	}
	if _, ok := smc.mutation.MatchID(); !ok {
		return &ValidationError{Name: "match_id", err: errors.New(`ent: missing required field "SubscriptionMatch.match_id"`)}
	}
	if _, ok := smc.mutation.PlayerID(); !ok {
		return &ValidationError{Name: "player_id", err: errors.New(`ent: missing required field "SubscriptionMatch.player_id"`)}
	}
	if _, ok := smc.mutation.PlayerSlot(); !ok {
		return &ValidationError{Name: "player_slot", err: errors.New(`ent: missing required field "SubscriptionMatch.player_slot"`)}
	}
	if _, ok := smc.mutation.RadiantWin(); !ok {
		return &ValidationError{Name: "radiant_win", err: errors.New(`ent: missing required field "SubscriptionMatch.radiant_win"`)}
	}
	if _, ok := smc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "SubscriptionMatch.duration"`)}
	}
	if _, ok := smc.mutation.GameMode(); !ok {
		return &ValidationError{Name: "game_mode", err: errors.New(`ent: missing required field "SubscriptionMatch.game_mode"`)}
	}
	if _, ok := smc.mutation.LobbyType(); !ok {
		return &ValidationError{Name: "lobby_type", err: errors.New(`ent: missing required field "SubscriptionMatch.lobby_type"`)}
	}
	if _, ok := smc.mutation.HeroID(); !ok {
		return &ValidationError{Name: "hero_id", err: errors.New(`ent: missing required field "SubscriptionMatch.hero_id"`)}
	}
	if _, ok := smc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "SubscriptionMatch.start_time"`)}
	}
	if _, ok := smc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "SubscriptionMatch.version"`)}
	}
	if _, ok := smc.mutation.Kills(); !ok {
		return &ValidationError{Name: "kills", err: errors.New(`ent: missing required field "SubscriptionMatch.kills"`)}
	}
	if _, ok := smc.mutation.Deaths(); !ok {
		return &ValidationError{Name: "deaths", err: errors.New(`ent: missing required field "SubscriptionMatch.deaths"`)}
	}
	if _, ok := smc.mutation.Assists(); !ok {
		return &ValidationError{Name: "assists", err: errors.New(`ent: missing required field "SubscriptionMatch.assists"`)}
	}
	if _, ok := smc.mutation.LeaverStatus(); !ok {
		return &ValidationError{Name: "leaver_status", err: errors.New(`ent: missing required field "SubscriptionMatch.leaver_status"`)}
	}
	if _, ok := smc.mutation.PartySize(); !ok {
		return &ValidationError{Name: "party_size", err: errors.New(`ent: missing required field "SubscriptionMatch.party_size"`)}
	}
	return nil
}

func (smc *SubscriptionMatchCreate) sqlSave(ctx context.Context) (*SubscriptionMatch, error) {
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (smc *SubscriptionMatchCreate) createSpec() (*SubscriptionMatch, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionMatch{config: smc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: subscriptionmatch.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subscriptionmatch.FieldID,
			},
		}
	)
	if value, ok := smc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscriptionmatch.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := smc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscriptionmatch.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := smc.mutation.MatchID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: subscriptionmatch.FieldMatchID,
		})
		_node.MatchID = value
	}
	if value, ok := smc.mutation.PlayerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscriptionmatch.FieldPlayerID,
		})
		_node.PlayerID = value
	}
	if value, ok := smc.mutation.PlayerSlot(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscriptionmatch.FieldPlayerSlot,
		})
		_node.PlayerSlot = value
	}
	if value, ok := smc.mutation.RadiantWin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: subscriptionmatch.FieldRadiantWin,
		})
		_node.RadiantWin = value
	}
	if value, ok := smc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscriptionmatch.FieldDuration,
		})
		_node.Duration = value
	}
	if value, ok := smc.mutation.GameMode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscriptionmatch.FieldGameMode,
		})
		_node.GameMode = value
	}
	if value, ok := smc.mutation.LobbyType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscriptionmatch.FieldLobbyType,
		})
		_node.LobbyType = value
	}
	if value, ok := smc.mutation.HeroID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscriptionmatch.FieldHeroID,
		})
		_node.HeroID = value
	}
	if value, ok := smc.mutation.StartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscriptionmatch.FieldStartTime,
		})
		_node.StartTime = value
	}
	if value, ok := smc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscriptionmatch.FieldVersion,
		})
		_node.Version = value
	}
	if value, ok := smc.mutation.Kills(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscriptionmatch.FieldKills,
		})
		_node.Kills = value
	}
	if value, ok := smc.mutation.Deaths(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscriptionmatch.FieldDeaths,
		})
		_node.Deaths = value
	}
	if value, ok := smc.mutation.Assists(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscriptionmatch.FieldAssists,
		})
		_node.Assists = value
	}
	if value, ok := smc.mutation.Skill(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscriptionmatch.FieldSkill,
		})
		_node.Skill = &value
	}
	if value, ok := smc.mutation.LeaverStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscriptionmatch.FieldLeaverStatus,
		})
		_node.LeaverStatus = value
	}
	if value, ok := smc.mutation.PartySize(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscriptionmatch.FieldPartySize,
		})
		_node.PartySize = value
	}
	return _node, _spec
}

// SubscriptionMatchCreateBulk is the builder for creating many SubscriptionMatch entities in bulk.
type SubscriptionMatchCreateBulk struct {
	config
	builders []*SubscriptionMatchCreate
}

// Save creates the SubscriptionMatch entities in the database.
func (smcb *SubscriptionMatchCreateBulk) Save(ctx context.Context) ([]*SubscriptionMatch, error) {
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*SubscriptionMatch, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionMatchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *SubscriptionMatchCreateBulk) SaveX(ctx context.Context) []*SubscriptionMatch {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smcb *SubscriptionMatchCreateBulk) Exec(ctx context.Context) error {
	_, err := smcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smcb *SubscriptionMatchCreateBulk) ExecX(ctx context.Context) {
	if err := smcb.Exec(ctx); err != nil {
		panic(err)
	}
}
