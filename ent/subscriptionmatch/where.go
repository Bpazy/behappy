// Code generated by ent, DO NOT EDIT.

package subscriptionmatch

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Bpazy/behappy/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// MatchID applies equality check predicate on the "match_id" field. It's identical to MatchIDEQ.
func MatchID(v int64) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMatchID), v))
	})
}

// PlayerID applies equality check predicate on the "player_id" field. It's identical to PlayerIDEQ.
func PlayerID(v string) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlayerID), v))
	})
}

// PlayerSlot applies equality check predicate on the "player_slot" field. It's identical to PlayerSlotEQ.
func PlayerSlot(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlayerSlot), v))
	})
}

// RadiantWin applies equality check predicate on the "radiant_win" field. It's identical to RadiantWinEQ.
func RadiantWin(v bool) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRadiantWin), v))
	})
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// GameMode applies equality check predicate on the "game_mode" field. It's identical to GameModeEQ.
func GameMode(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGameMode), v))
	})
}

// LobbyType applies equality check predicate on the "lobby_type" field. It's identical to LobbyTypeEQ.
func LobbyType(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLobbyType), v))
	})
}

// HeroID applies equality check predicate on the "hero_id" field. It's identical to HeroIDEQ.
func HeroID(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeroID), v))
	})
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// Kills applies equality check predicate on the "kills" field. It's identical to KillsEQ.
func Kills(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKills), v))
	})
}

// Deaths applies equality check predicate on the "deaths" field. It's identical to DeathsEQ.
func Deaths(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeaths), v))
	})
}

// Assists applies equality check predicate on the "assists" field. It's identical to AssistsEQ.
func Assists(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAssists), v))
	})
}

// Skill applies equality check predicate on the "skill" field. It's identical to SkillEQ.
func Skill(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSkill), v))
	})
}

// LeaverStatus applies equality check predicate on the "leaver_status" field. It's identical to LeaverStatusEQ.
func LeaverStatus(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeaverStatus), v))
	})
}

// PartySize applies equality check predicate on the "party_size" field. It's identical to PartySizeEQ.
func PartySize(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPartySize), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// MatchIDEQ applies the EQ predicate on the "match_id" field.
func MatchIDEQ(v int64) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMatchID), v))
	})
}

// MatchIDNEQ applies the NEQ predicate on the "match_id" field.
func MatchIDNEQ(v int64) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMatchID), v))
	})
}

// MatchIDIn applies the In predicate on the "match_id" field.
func MatchIDIn(vs ...int64) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMatchID), v...))
	})
}

// MatchIDNotIn applies the NotIn predicate on the "match_id" field.
func MatchIDNotIn(vs ...int64) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMatchID), v...))
	})
}

// MatchIDGT applies the GT predicate on the "match_id" field.
func MatchIDGT(v int64) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMatchID), v))
	})
}

// MatchIDGTE applies the GTE predicate on the "match_id" field.
func MatchIDGTE(v int64) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMatchID), v))
	})
}

// MatchIDLT applies the LT predicate on the "match_id" field.
func MatchIDLT(v int64) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMatchID), v))
	})
}

// MatchIDLTE applies the LTE predicate on the "match_id" field.
func MatchIDLTE(v int64) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMatchID), v))
	})
}

// PlayerIDEQ applies the EQ predicate on the "player_id" field.
func PlayerIDEQ(v string) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlayerID), v))
	})
}

// PlayerIDNEQ applies the NEQ predicate on the "player_id" field.
func PlayerIDNEQ(v string) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlayerID), v))
	})
}

// PlayerIDIn applies the In predicate on the "player_id" field.
func PlayerIDIn(vs ...string) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlayerID), v...))
	})
}

// PlayerIDNotIn applies the NotIn predicate on the "player_id" field.
func PlayerIDNotIn(vs ...string) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlayerID), v...))
	})
}

// PlayerIDGT applies the GT predicate on the "player_id" field.
func PlayerIDGT(v string) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlayerID), v))
	})
}

// PlayerIDGTE applies the GTE predicate on the "player_id" field.
func PlayerIDGTE(v string) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlayerID), v))
	})
}

// PlayerIDLT applies the LT predicate on the "player_id" field.
func PlayerIDLT(v string) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlayerID), v))
	})
}

// PlayerIDLTE applies the LTE predicate on the "player_id" field.
func PlayerIDLTE(v string) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlayerID), v))
	})
}

// PlayerIDContains applies the Contains predicate on the "player_id" field.
func PlayerIDContains(v string) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlayerID), v))
	})
}

// PlayerIDHasPrefix applies the HasPrefix predicate on the "player_id" field.
func PlayerIDHasPrefix(v string) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlayerID), v))
	})
}

// PlayerIDHasSuffix applies the HasSuffix predicate on the "player_id" field.
func PlayerIDHasSuffix(v string) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlayerID), v))
	})
}

// PlayerIDEqualFold applies the EqualFold predicate on the "player_id" field.
func PlayerIDEqualFold(v string) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlayerID), v))
	})
}

// PlayerIDContainsFold applies the ContainsFold predicate on the "player_id" field.
func PlayerIDContainsFold(v string) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlayerID), v))
	})
}

// PlayerSlotEQ applies the EQ predicate on the "player_slot" field.
func PlayerSlotEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlayerSlot), v))
	})
}

// PlayerSlotNEQ applies the NEQ predicate on the "player_slot" field.
func PlayerSlotNEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlayerSlot), v))
	})
}

// PlayerSlotIn applies the In predicate on the "player_slot" field.
func PlayerSlotIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlayerSlot), v...))
	})
}

// PlayerSlotNotIn applies the NotIn predicate on the "player_slot" field.
func PlayerSlotNotIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlayerSlot), v...))
	})
}

// PlayerSlotGT applies the GT predicate on the "player_slot" field.
func PlayerSlotGT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlayerSlot), v))
	})
}

// PlayerSlotGTE applies the GTE predicate on the "player_slot" field.
func PlayerSlotGTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlayerSlot), v))
	})
}

// PlayerSlotLT applies the LT predicate on the "player_slot" field.
func PlayerSlotLT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlayerSlot), v))
	})
}

// PlayerSlotLTE applies the LTE predicate on the "player_slot" field.
func PlayerSlotLTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlayerSlot), v))
	})
}

// RadiantWinEQ applies the EQ predicate on the "radiant_win" field.
func RadiantWinEQ(v bool) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRadiantWin), v))
	})
}

// RadiantWinNEQ applies the NEQ predicate on the "radiant_win" field.
func RadiantWinNEQ(v bool) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRadiantWin), v))
	})
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuration), v))
	})
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDuration), v...))
	})
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDuration), v...))
	})
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuration), v))
	})
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuration), v))
	})
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuration), v))
	})
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuration), v))
	})
}

// GameModeEQ applies the EQ predicate on the "game_mode" field.
func GameModeEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGameMode), v))
	})
}

// GameModeNEQ applies the NEQ predicate on the "game_mode" field.
func GameModeNEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGameMode), v))
	})
}

// GameModeIn applies the In predicate on the "game_mode" field.
func GameModeIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGameMode), v...))
	})
}

// GameModeNotIn applies the NotIn predicate on the "game_mode" field.
func GameModeNotIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGameMode), v...))
	})
}

// GameModeGT applies the GT predicate on the "game_mode" field.
func GameModeGT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGameMode), v))
	})
}

// GameModeGTE applies the GTE predicate on the "game_mode" field.
func GameModeGTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGameMode), v))
	})
}

// GameModeLT applies the LT predicate on the "game_mode" field.
func GameModeLT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGameMode), v))
	})
}

// GameModeLTE applies the LTE predicate on the "game_mode" field.
func GameModeLTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGameMode), v))
	})
}

// LobbyTypeEQ applies the EQ predicate on the "lobby_type" field.
func LobbyTypeEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLobbyType), v))
	})
}

// LobbyTypeNEQ applies the NEQ predicate on the "lobby_type" field.
func LobbyTypeNEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLobbyType), v))
	})
}

// LobbyTypeIn applies the In predicate on the "lobby_type" field.
func LobbyTypeIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLobbyType), v...))
	})
}

// LobbyTypeNotIn applies the NotIn predicate on the "lobby_type" field.
func LobbyTypeNotIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLobbyType), v...))
	})
}

// LobbyTypeGT applies the GT predicate on the "lobby_type" field.
func LobbyTypeGT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLobbyType), v))
	})
}

// LobbyTypeGTE applies the GTE predicate on the "lobby_type" field.
func LobbyTypeGTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLobbyType), v))
	})
}

// LobbyTypeLT applies the LT predicate on the "lobby_type" field.
func LobbyTypeLT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLobbyType), v))
	})
}

// LobbyTypeLTE applies the LTE predicate on the "lobby_type" field.
func LobbyTypeLTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLobbyType), v))
	})
}

// HeroIDEQ applies the EQ predicate on the "hero_id" field.
func HeroIDEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeroID), v))
	})
}

// HeroIDNEQ applies the NEQ predicate on the "hero_id" field.
func HeroIDNEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeroID), v))
	})
}

// HeroIDIn applies the In predicate on the "hero_id" field.
func HeroIDIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHeroID), v...))
	})
}

// HeroIDNotIn applies the NotIn predicate on the "hero_id" field.
func HeroIDNotIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHeroID), v...))
	})
}

// HeroIDGT applies the GT predicate on the "hero_id" field.
func HeroIDGT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeroID), v))
	})
}

// HeroIDGTE applies the GTE predicate on the "hero_id" field.
func HeroIDGTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeroID), v))
	})
}

// HeroIDLT applies the LT predicate on the "hero_id" field.
func HeroIDLT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeroID), v))
	})
}

// HeroIDLTE applies the LTE predicate on the "hero_id" field.
func HeroIDLTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeroID), v))
	})
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartTime), v))
	})
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartTime), v...))
	})
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartTime), v...))
	})
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartTime), v))
	})
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartTime), v))
	})
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartTime), v))
	})
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartTime), v))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// KillsEQ applies the EQ predicate on the "kills" field.
func KillsEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKills), v))
	})
}

// KillsNEQ applies the NEQ predicate on the "kills" field.
func KillsNEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKills), v))
	})
}

// KillsIn applies the In predicate on the "kills" field.
func KillsIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldKills), v...))
	})
}

// KillsNotIn applies the NotIn predicate on the "kills" field.
func KillsNotIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldKills), v...))
	})
}

// KillsGT applies the GT predicate on the "kills" field.
func KillsGT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKills), v))
	})
}

// KillsGTE applies the GTE predicate on the "kills" field.
func KillsGTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKills), v))
	})
}

// KillsLT applies the LT predicate on the "kills" field.
func KillsLT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKills), v))
	})
}

// KillsLTE applies the LTE predicate on the "kills" field.
func KillsLTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKills), v))
	})
}

// DeathsEQ applies the EQ predicate on the "deaths" field.
func DeathsEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeaths), v))
	})
}

// DeathsNEQ applies the NEQ predicate on the "deaths" field.
func DeathsNEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeaths), v))
	})
}

// DeathsIn applies the In predicate on the "deaths" field.
func DeathsIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeaths), v...))
	})
}

// DeathsNotIn applies the NotIn predicate on the "deaths" field.
func DeathsNotIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeaths), v...))
	})
}

// DeathsGT applies the GT predicate on the "deaths" field.
func DeathsGT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeaths), v))
	})
}

// DeathsGTE applies the GTE predicate on the "deaths" field.
func DeathsGTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeaths), v))
	})
}

// DeathsLT applies the LT predicate on the "deaths" field.
func DeathsLT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeaths), v))
	})
}

// DeathsLTE applies the LTE predicate on the "deaths" field.
func DeathsLTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeaths), v))
	})
}

// AssistsEQ applies the EQ predicate on the "assists" field.
func AssistsEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAssists), v))
	})
}

// AssistsNEQ applies the NEQ predicate on the "assists" field.
func AssistsNEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAssists), v))
	})
}

// AssistsIn applies the In predicate on the "assists" field.
func AssistsIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAssists), v...))
	})
}

// AssistsNotIn applies the NotIn predicate on the "assists" field.
func AssistsNotIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAssists), v...))
	})
}

// AssistsGT applies the GT predicate on the "assists" field.
func AssistsGT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAssists), v))
	})
}

// AssistsGTE applies the GTE predicate on the "assists" field.
func AssistsGTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAssists), v))
	})
}

// AssistsLT applies the LT predicate on the "assists" field.
func AssistsLT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAssists), v))
	})
}

// AssistsLTE applies the LTE predicate on the "assists" field.
func AssistsLTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAssists), v))
	})
}

// SkillEQ applies the EQ predicate on the "skill" field.
func SkillEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSkill), v))
	})
}

// SkillNEQ applies the NEQ predicate on the "skill" field.
func SkillNEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSkill), v))
	})
}

// SkillIn applies the In predicate on the "skill" field.
func SkillIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSkill), v...))
	})
}

// SkillNotIn applies the NotIn predicate on the "skill" field.
func SkillNotIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSkill), v...))
	})
}

// SkillGT applies the GT predicate on the "skill" field.
func SkillGT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSkill), v))
	})
}

// SkillGTE applies the GTE predicate on the "skill" field.
func SkillGTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSkill), v))
	})
}

// SkillLT applies the LT predicate on the "skill" field.
func SkillLT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSkill), v))
	})
}

// SkillLTE applies the LTE predicate on the "skill" field.
func SkillLTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSkill), v))
	})
}

// SkillIsNil applies the IsNil predicate on the "skill" field.
func SkillIsNil() predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSkill)))
	})
}

// SkillNotNil applies the NotNil predicate on the "skill" field.
func SkillNotNil() predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSkill)))
	})
}

// LeaverStatusEQ applies the EQ predicate on the "leaver_status" field.
func LeaverStatusEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeaverStatus), v))
	})
}

// LeaverStatusNEQ applies the NEQ predicate on the "leaver_status" field.
func LeaverStatusNEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLeaverStatus), v))
	})
}

// LeaverStatusIn applies the In predicate on the "leaver_status" field.
func LeaverStatusIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLeaverStatus), v...))
	})
}

// LeaverStatusNotIn applies the NotIn predicate on the "leaver_status" field.
func LeaverStatusNotIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLeaverStatus), v...))
	})
}

// LeaverStatusGT applies the GT predicate on the "leaver_status" field.
func LeaverStatusGT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLeaverStatus), v))
	})
}

// LeaverStatusGTE applies the GTE predicate on the "leaver_status" field.
func LeaverStatusGTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLeaverStatus), v))
	})
}

// LeaverStatusLT applies the LT predicate on the "leaver_status" field.
func LeaverStatusLT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLeaverStatus), v))
	})
}

// LeaverStatusLTE applies the LTE predicate on the "leaver_status" field.
func LeaverStatusLTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLeaverStatus), v))
	})
}

// PartySizeEQ applies the EQ predicate on the "party_size" field.
func PartySizeEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPartySize), v))
	})
}

// PartySizeNEQ applies the NEQ predicate on the "party_size" field.
func PartySizeNEQ(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPartySize), v))
	})
}

// PartySizeIn applies the In predicate on the "party_size" field.
func PartySizeIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPartySize), v...))
	})
}

// PartySizeNotIn applies the NotIn predicate on the "party_size" field.
func PartySizeNotIn(vs ...int) predicate.SubscriptionMatch {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPartySize), v...))
	})
}

// PartySizeGT applies the GT predicate on the "party_size" field.
func PartySizeGT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPartySize), v))
	})
}

// PartySizeGTE applies the GTE predicate on the "party_size" field.
func PartySizeGTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPartySize), v))
	})
}

// PartySizeLT applies the LT predicate on the "party_size" field.
func PartySizeLT(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPartySize), v))
	})
}

// PartySizeLTE applies the LTE predicate on the "party_size" field.
func PartySizeLTE(v int) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPartySize), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubscriptionMatch) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubscriptionMatch) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubscriptionMatch) predicate.SubscriptionMatch {
	return predicate.SubscriptionMatch(func(s *sql.Selector) {
		p(s.Not())
	})
}
