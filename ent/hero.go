// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Bpazy/behappy/ent/hero"
)

// Hero is the model entity for the Hero schema.
type Hero struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// HeroID holds the value of the "hero_id" field.
	HeroID int `json:"hero_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// LocalizedName holds the value of the "localized_name" field.
	LocalizedName string `json:"localized_name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hero) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case hero.FieldID, hero.FieldHeroID:
			values[i] = new(sql.NullInt64)
		case hero.FieldName, hero.FieldLocalizedName:
			values[i] = new(sql.NullString)
		case hero.FieldCreateTime, hero.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Hero", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hero fields.
func (h *Hero) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hero.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case hero.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				h.CreateTime = value.Time
			}
		case hero.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				h.UpdateTime = value.Time
			}
		case hero.FieldHeroID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hero_id", values[i])
			} else if value.Valid {
				h.HeroID = int(value.Int64)
			}
		case hero.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				h.Name = value.String
			}
		case hero.FieldLocalizedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field localized_name", values[i])
			} else if value.Valid {
				h.LocalizedName = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Hero.
// Note that you need to call Hero.Unwrap() before calling this method if this Hero
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hero) Update() *HeroUpdateOne {
	return (&HeroClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the Hero entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hero) Unwrap() *Hero {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hero is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hero) String() string {
	var builder strings.Builder
	builder.WriteString("Hero(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("create_time=")
	builder.WriteString(h.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(h.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("hero_id=")
	builder.WriteString(fmt.Sprintf("%v", h.HeroID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(h.Name)
	builder.WriteString(", ")
	builder.WriteString("localized_name=")
	builder.WriteString(h.LocalizedName)
	builder.WriteByte(')')
	return builder.String()
}

// Heros is a parsable slice of Hero.
type Heros []*Hero

func (h Heros) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
